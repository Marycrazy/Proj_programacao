@startuml diagrama
skinparam Linetype ortho
class Utilizador {
  - login: String
  - password: String
  - nome: String
  - estado: boolean
  - email: String
  - tipo: String
  + Utilizador(login: String, password: String, nome: String, estado: boolean, email: String, tipo: String)
  + getLogin(): String
  + getPassword(): String
  + getNome(): String
  + getEstado(): String
  + getEmail(): String
  + getTipo(): String
  + setLogin()
  + setPassword()
  + setNome()
  + setEstado()
  + setEstado(estado: boolean)
  + loggedUserLoop(user: Utilizador)
  + registerNewUser(estado: String, type: String): Utilizador
}

class Cliente extends Utilizador {
  - NIF: String
  - morada: String
  - telefone: String
  + Cliente(login: String, password: String, nome: String, estado: String, email: String, tipo: String, NIF: String, morada: String, telefone: String)
  + getNIF(): String
  + getMorada(): String
  + getTelefone(): String
  + setNIF()
  + setMorada()
  + setTelefone()
  + loggedUserLoop(user: Utilizador)
  + registerNewUser(estado: String, type: String): Cliente
  + editperfil(Utilizador user)
  + perfilUtilizador(Utilizador user)
  + realizarPedido()
  + consultarCompras()
}

class Tecnicos extends Utilizador {
  - NIF: String
  - morada: String
  - telefone: String
  + Tecnicos(login: String, password: String, nome: String, estado: String, email: String, tipo: String, NIF: String, morada: String, telefone: String)
  + getNIF(): String
  + getMorada(): String
  + getTelefone(): String
  + setNIF()
  + setMorada()
  + setTelefone()
  + loggedUserLoop(user: Utilizador)
  + registerNewUser(estado: String, type: String): Tecnicos
  + editperfil(Utilizador user)
  + perfilUtilizador(Utilizador user)
  + gerirEquipamentos()
  + gerirVendas()
  + processarPedido()
}

class Administrador extends Utilizador {
    +Administrador()
    +loggedUserLoop()
    +registerNewUser()
    +aprovarRegisto()
    +perfilUtilizador(Utilizador user)
    +utilizadoresRegeditados()
    editperfil(Utilizador user)
    +aprovarPedidos()
    +gerirVendas()
    +associarTecnico()
}

class Main {
        +main(String[] args)
        -mainLoop()
        +registerUser()
        +loginUser() Utilizador
        +pressEnterKey()
        +clearConsole()
    }

class Validator {
  - validators: Map<String, Function<String, Boolean>>
  + isValidEmail(email: String): boolean
  + isValidNIF(nif: String): boolean
  + isValidPhoneNumber(phoneNumber: String): boolean
  + isValidName(name: String): boolean
  + isValidLogin(login: String): boolean
  + isValidAddress(address: String): boolean
  + validatePassword(type: String): String
  + validateInput(typeString: String): String
  - encryptPassword(password: String): String
  + isLoginUnique(String login): boolean
  + isEmailUnique(String email): boolean
  + isNIFUnique(String nif): boolean
  + isPhoneNumberUnique(String phoneNumber): boolean
  + isValueUnique(String type, String value): boolean
}

class Ficheiros {
  + doUsersExist()
  + insertUserFicehiro(Sistema sistema)
  + insertObjectFicheiro(Sistema sistema)
  + authenticateUser(String login, String password)
  + carregarDadosSistema()
}

class Input {
  - scanner: Scanner
  - fileReader: BufferedReader
  - fileWriter: BufferedWriter
  - getScanner(): Scanner
  + readLine(): String
  + readInt(): int
  + hasNextInt(): boolean
  + closeScanner()
  + openFIleReade(filename: String)
  + readFileLine(): String
  + writeFileLine(String line)
  + closeFile()
  + openFileWriter(filename: String) : ObjectOutputStream
}

class Sistema {
  -List~Utilizador~ utilizadores
  -List~Servico~ servicos
  -List~Equipamentos~ equipamentos
  -List~Categoria~ categorias
  -List~Fornecedor~ fornecedores
  - static Sistema sistema
  +getInstance()
  +setInstance()
  +Sistema()
  +save()
  +adicionarUtilizador()
  +adicionarEquipamento()
  +adicionarCategoria()
  +adicionarServico()
  +carregarDados()
  +buscarUtilizadorPorLogin()
  +getUtilizadoresInativos()
  +autenticarUtilizador()
}
class Servico {
        -int codigo
        -Date dataPedido
        -String descricao
        -EstadoServico estado
        -double tempoProcessamento
        -double valorTotal
        -List~Equipamento~ equipamentos
        -Map~Equipamento, Integer~ quantidades
        +calcularValorTotal()
        +adicionarEquipamento()
        +concluirServico()
}

class Equipamento {
    -String marca
    -String modelo
    -String codigoInterno
    -Serie serie
    -Versao versao
    -float voltagem
    -int quantidadeStock
    -float precoVenda
    -String observacoes
    -boolean isOEM
    -List~Fornecedor~ fornecedores
    -List~Categoria~ categorias
    +Equipamento(marca: String, modelo: String, codigoInterno: String, serie: Serie, versao: Versao, voltagem: double, quantidadeStock: int, precoVenda: double, observacoes: String, isOEM: boolean)
    +getMarca(): String
    +getModelo(): String
    +getCodigoInterno(): String
    +getSerie(): Serie
    +getVersao(): Versao
    +getVoltagem(): double
    +getQuantidadeStock(): int
    +getPrecoVenda(): double
    +getObservacoes(): String
    +getIsOEM(): boolean
    +getFornecedores(): List~Fornecedor~
    +getCategorias(): List~Categoria~
    +setMarca()
    +setModelo()
    +setCodigoInterno()
    +setSerie()
    +setVersao()
    +setVoltagem()
    +setQuantidadeStock()
    +setPrecoVenda()
    +setObservacoes()
    +setIsOEM()
    +getters():Map<String, Function<Equipamentos, String>>
    +adicionarFornecedor()
    +adicionarCategoria()
    +toString(): String
    +atualizarStock()
}

class Fornecedor {
    -String nome
    -String morada
    -String telefone
    +Fornecedor(nome: String, morada: String, telefone: String)
    +getNome(): String
    +getMorada(): String
    +getTelefone(): String
    +setNome()
    +setMorada()
    +setTelefone()
    +adicionarFornecedor():Fornecedor
    +toString(): String
}

class Categoria {
    -String designacao
    -String familia
    +Categoria(designacao: String, familia: String)
    +getDesignacao(): String
    +getFamilia(): String
    +setDesignacao()
    +setFamilia()
    +adicionarCategoria():Categoria
    +toString(): String
}

class Serie {
    -int geracao
    -int sequencia
}

class Versao {
    -int unidade
    -int valorAlfa
    -int valorBeta
}

Sistema -- Utilizador
Sistema -- Servico
Sistema -- Equipamento
Sistema --> Ficheiros
Main --> Input
Main -- Validator
Tecnicos --> Validator
Tecnicos -- Servico
Tecnicos --> Sistema
Cliente --> Validator
Cliente -- Servico
Cliente -- Sistema
Administrador --> Validator
Administrador --> Sistema
Validator --> Input
Ficheiros --> Input
Utilizador --> Input
Equipamento -- Fornecedor
Equipamento -- Categoria
Equipamento -- Serie
Equipamento -- Versao
Servico -- Equipamento
Categoria -- Equipamento
Categoria -- Sistema
Fornecedor -- Equipamento
Fornecedor -- Input
Fornecedor -- Sistema


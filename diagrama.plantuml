@startuml diagrama
skinparam Linetype ortho
class Utilizador {
  - login: String
  - password: String
  - nome: String
  - estado: boolean
  - email: String
  - tipo: String

  + Utilizador(login: String, password: String, nome: String, estado: boolean, email: String, tipo: String)
  + getLogin(): String
  + getPassword(): String
  + getNome(): String
  + getEstado(): String
  + getEmail(): String
  + getTipo(): String
  + setLogin()
  + setPassword()
  + setNome()
  + setEstado()
  + setEstado(estado: boolean)
  + loggedUserLoop(user: Utilizador)
  + registerNewUser(estado: String, type: String): Utilizador
}

class Cliente extends Utilizador {
  - String NIF
  - String morada
  - String telefone

  + Cliente(String login, String password, String nome, boolean estado, String email, String tipo, String NIF, String morada, String telefone)
  + String getNIF()
  + String getMorada()
  + String getTelefone()
  + void setNIF()
  + void setMorada()
  + void setTelefone()
  + static void perfilUtilizador(Utilizador user)
  + static List<Servicos> getServicosCliente(Cliente cliente)
  + static void editperfil(Utilizador user)
  + static void realizarPedido(Utilizador user)
  + static boolean processPedido(List<Equipamentos> equipamentos, Servicos pedido)
  + static String handleDescricao(Servicos pedido)
  + static void listagemServiçosLoop(List<Servicos> servicosCliente)
  + static void loggedUserLoop(Utilizador user)
  + static Cliente registerNewUser(boolean estado, String type)
}

class Tecnicos extends Utilizador {
  - String NIF
  - String morada
  - String telefone

  + Tecnicos(String login, String password, String nome, boolean estado, String email, String tipo, String NIF, String morada, String telefone)
  + String getNIF()
  + String getMorada()
  + String getTelefone()
  + void setNIF()
  + void setMorada()
  + void setTelefone()
  + static void perfilUtilizador(Utilizador user)
  + static void editperfil(Utilizador user)
  + static List<Servicos> getServicosTecnico(Tecnicos tecnico)
  + static void listarServicosTecnico(List<Servicos> servicosTecnico)
  + static SubServico criarSubServico(List<Servicos> servicosTecnico)
  + static void encerrarServico(List<Servicos> servicosTecnico)
  + static void listagemServiçosLoop(List<Servicos> servicosTecnico)
  + static void gestaoServicos(List<Servicos> servicosTecnico)
  + static void loggedUserLoop(Utilizador user)
  + static Tecnicos registerNewUser(boolean estado, String type)
}

class Administrador extends Utilizador {
  + Administrador(String login, String password, String nome, boolean estado, String email, String tipo)
  + static Administrador registerNewUser(boolean estado, String type)
  + static List<Utilizador> getUtilizadoresInativos()
  + static void perfilUtilizador(Utilizador user, boolean mostrar)
  + static void utilizadoresRegeditados(List<Utilizador> inativos)
  + static void aprovarRegisto()
  + static void editperfil(Utilizador user)
  + static void listagemUtilizadores()
  + static List<Servicos> getServicosSubmetidos()
  + static void aprovadoServico()
  + static void associarTecnico(Servicos servicos)
  + static void listagemServiçosLoop()
  + static void loggedUserLoop(Utilizador user)
}

class Main {
        +main(String[] args)
        -mainLoop()
        +registerUser()
        +loginUser() Utilizador
        +pressEnterKey()
        +clearConsole()
}

class Validator {
  - validators: Map<String, Function<String, Boolean>>
  + isValidEmail(email: String): boolean
  + isValidNIF(nif: String): boolean
  + isValidIntegerNumeric(value: String): boolean
  + isValidFloatNumeric(value: String): boolean
  + isValidPhoneNumber(phoneNumber: String): boolean
  + isValidName(name: String): boolean
  + isValidLogin(login: String): boolean
  + isValidAddress(address: String): boolean
  + isValidMarca(marca: String): boolean
  + isValidModelo(modelo: String): boolean
  + isValidObs(observacoes: String): boolean
  + validatePassword(type: String): String
  + validateInput(typeString: String): String
  - encryptPassword(password: String): String
  + isLoginUnique(String login): boolean
  + isEmailUnique(String email): boolean
  + isNIFUnique(String nif): boolean
  + isPhoneNumberUnique(String phoneNumber): boolean
  + isCodigoEquipamentoUnico(String codigo): boolean
  + isValueUnique(String type, String value): boolean
}

class Ficheiros {
  + doUsersExist()
  + insertUserFicehiro(Sistema sistema)
  + insertObjectFicheiro(Sistema sistema)
  + authenticateUser(String login, String password)
  + carregarDadosSistema()
}

class Input {
  - scanner: Scanner
  - fileReader: BufferedReader
  - fileWriter: BufferedWriter
  - getScanner(): Scanner
  + readLine(): String
  + readInt(): int
  + hasNextInt(): boolean
  + closeScanner()
  + clearBuffer()
  + openFIleReade(filename: String)
  + readFileLine(): String
  + writeFileLine(String line)
  + closeFile()
  + openFileWriter(filename: String) : ObjectOutputStream
}

class Sistema {
  - List<Utilizador> utilizadores
  - List<Equipamentos> equipamentos
  - List<Categoria> categorias
  - List<Fornecedor> fornecedores
  - List<Servicos> servicos

  + void adicionarutilizador(Utilizador utilizador)
  + void adicionarServico(Servicos servico)
  + void adicionarEquipamento(Equipamentos equipamento)
  + void adicionarCategoria(Categoria categoria)
  + void adicionarFornecedor(Fornecedor fornecedor)
  + List<Utilizador> getUtilizadores()
  + List<Equipamentos> getEquipamentos()
  + List<Categoria> getCategorias()
  + List<Fornecedor> getFornecedores()
  + List<Servicos> getServicos()
  + void carregarDados()
  + Utilizador buscarUtilizadorPorLogin(String login)
  + Utilizador autenticarUtilizador(String login, String password)
}

enum EstadoServico {
    SUBMETIDO
    ACEITE
    CONCLUIDO
}

class Servico {
  - Cliente cliente
  - int codigo
  - Date data
  - String descricao
  - EstadoServico estado
  - int tempoProcessamento
  - double valorTotal
  - Tecnicos tecnicoResponsavel
  - List<Equipamentos> equipamento
  - List<Integer> quantidades
  - List<SubServico> subServicos

  + Servicos(Cliente cliente, Date data, String descricao, double valorTotal)
  + Cliente getCliente()
  + int getCodigo()
  + Date getData()
  + String getDescricao()
  + EstadoServico getEstado()
  + int getTempoProcessamento()
  + double getValorTotal()
  + Tecnicos getTecnicoResponsavel()
  + List<Equipamentos> getEquipamento()
  + List<Integer> getQuantidades()
  + List<SubServico> getSubServicos()
  + void setCliente(Cliente cliente)
  + void setCodigo(int codigo)
  + void setData(Date data)
  + void setDescricao(String descricao)
  + void setEstado(EstadoServico estado)
  + void setTempoProcessamento(int tempoProcessamento)
  + void setValorTotal(double valorTotal)
  + void setTecnicoResponsavel(Tecnicos tecnicoResponsavel)
  + void adicionarEquipamento(Equipamentos equipamento, int quantidade)
  + void adicionarSubServico(SubServico subServico)
  + static int tempoGasto()
  + static String formatarTempo(int minutos)
}

class SubServico{
  - String designacao
  - Tecnicos tecnicoresponsavel

  + SubServico(String designacao, Tecnicos tecnicoresponsavel)
  + String getDesignacao()
  + void setDesignacao(String designacao)
  + Tecnicos getTecnicoresponsavel()
  + void setTecnicoresponsavel(Tecnicos tecnicoresponsavel)
  + static void listarSubServico(List<SubServico> subServicos)
}

class Equipamentos {
    -String marca
    -String modelo
    -String codigoInterno
    -Serie serie
    -Versao versao
    -float voltagem
    -int quantidadeStock
    -float precoVenda
    -String observacoes
    -boolean isOEM
    -List~Fornecedor~ fornecedores
    -List~Categoria~ categorias
    +Equipamentos(marca: String, modelo: String, codigoInterno: String, serie: Serie, versao: Versao, voltagem: double, quantidadeStock: int, precoVenda: double, observacoes: String, isOEM: boolean)
    +getMarca(): String
    +getModelo(): String
    +getCodigoInterno(): String
    +getSerie(): Serie
    +getVersao(): Versao
    +getVoltagem(): double
    +getQuantidadeStock(): int
    +getPrecoVenda(): double
    +getObservacoes(): String
    +getIsOEM(): boolean
    +getFornecedores(): List~Fornecedor~
    +getCategorias(): List~Categoria~
    +setQuantidadeStock()
    +addrFornecedor()
    +handleFornecedorSelection()
    +addCategoria()
    +handleCategoriaSelection()
    +addinforEquipamento()
    +select(): int
    +addEquipamentos(): Equipamento
    +listarEquipamentos()
    +equipamentosLoop()
    +atualizarStock()
    +listarEquipamentosLoop()
}

class Fornecedor {
    -String nome
    -String morada
    -String telefone
    +Fornecedor(nome: String, morada: String, telefone: String)
    +getNome(): String
    +getMorada(): String
    +getTelefone(): String
    +setNome()
    +setMorada()
    +setTelefone()
    +listarfornecedores()
    +adicionarFornecedor():Fornecedor
    +toString(): String
}

class Categoria {
    -String designacao
    -String familia
    +Categoria(designacao: String, familia: String)
    +getDesignacao(): String
    +getFamilia(): String
    +setDesignacao()
    +setFamilia()
    +adicionarCategoria():Categoria
    +listarCategorias()
    +toString(): String
}

class Serie {
    -int geracao
    -int sequencia
    +Serie(geracao: int, sequencia: int)
    +adicionarSerie():Serie
    +toString(): String
}

class Versao {
    -int unidade
    -int valorAlfa
    -int valorBeta
    +versao(unidade: int, valorAlfa: int, valorBeta: int)
    +adicionarVersao():Versao
    +toString(): String
}

Sistema -- Utilizador
Sistema -- Servico
Sistema -- Equipamentos
Sistema <-- Ficheiros
Main --> Input
Main -- Validator
Tecnicos --> Validator
Tecnicos -- Servico
Tecnicos --> Sistema
Cliente --> Validator
Cliente --> Servico
Cliente -- Sistema
Administrador --> Validator
Administrador --> Sistema
Validator --> Input
Ficheiros --> Input
Utilizador --> Input
Equipamentos --> Fornecedor
Equipamentos --> Categoria
Equipamentos --> Serie
Equipamentos --> Versao
Servico -- Equipamentos
Categoria <-- Sistema
Fornecedor <-- Equipamentos
Fornecedor -- Input
Fornecedor <-- Sistema
SubServico <-- Servico
Servico --> EstadoServico